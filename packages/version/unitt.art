[
        #[
                version: 3.0.0-pre1
                date: to :date "2025-07-24T19:46:56+00:00"
                link: "https://github.com/RickBarretto/unitt/releases/tag/v3.0.0-pre1"
                details: #[
                        size: 2528095
                        files: 38
                        readme: {
                                <h1 align="center">
                                    Unitt
                                </h1>
                                
                                <p align="center">
                                    <i>Unitt</i> is a lean unit-test tool for the 
                                    <a href="https://github.com/arturo-lang/arturo/">
                                        Arturo Programming language
                                    </a>
                                    <br><br>
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo.png#gh-light-mode-only"
                                    />
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo-lightgray.png#gh-dark-mode-only" 
                                    />
                                </p>
                                
                                ## At a Glance
                                
                                <p align="center">
                                <img 
                                    alt="Running Unitt from terminal (v3)"
                                    width="720"
                                    src="./docs/running unitt - v3.png"
                                />
                                </p>
                                
                                ## Trying Unitt
                                
                                **Installation**
                                
                                ```
                                arturo -p install unitt
                                ```
                                
                                **Setup**
                                
                                Create a `unitt.toml` file on your project root:
                                
                                ```toml
                                # unitt.toml - Configuration for unitt
                                
                                path = "specs"              # Path to Tests
                                suffix = ".spec.art"        # Test file's suffix
                                binary = "./bin/arturo"     # Arturo Binary
                                ```
                                
                                **Running**
                                
                                ```
                                unitt
                                ```
                                
                                ### Testing code
                                
                                A real example of tests:
                                
                                ```art
                                import {unitt}!
                                
                                unix?: true
                                
                                describe "binary appending" [
                                    it "should operate integers" [
                                        b: to :binary 0
                                        expects.be: 'equal? @[express 2 append b 1]
                                        expects.be: 'equal? @[express 1 b ++ 1]
                                    ]
                                
                                    it "should return a binary" [
                                        b: to :binary 0
                                        expects.be: 'binary? @[append b 1]
                                        expects.be: 'binary? @[b ++ 1]
                                    ]
                                ]
                                
                                test.skip: unix? "split should deal with windows's paths" [
                                    expects.be: 'equal? @[
                                        ["." "splited" "path"]
                                        split.path ".\\splited\\path"
                                    ]
                                ]
                                
                                test "split should deal with unix path" [
                                    expects.be: 'equal? @[
                                        ["." "splited" "path"] 
                                        split.path "./splited/path"
                                    ]
                                ]
                                ```
                                
                                This will show you:
                                
                                ```
                                ======== .unitt\example\example.spec.art ========
                                
                                Describe: Module's Global Specs
                                
                                    ⏩ split should deal with windows's paths
                                
                                    ✅ split should deal with unix path
                                        ✅: equal? [. splited path] [. splited path]
                                
                                Describe: binary appending
                                
                                    ❌ - should operate integers
                                        ❌: equal? "2" 00 01
                                        ❌: equal? "1" 00 01
                                
                                    ✅ - should return a binary
                                        ✅: binary? 00 01
                                        ✅: binary? 00 01
                                
                                
                                ========== Summary ==========
                                
                                  ⏏️    TOTAL: 5 assertions
                                  ✅  PASSED: 3 assertion
                                  ⏩ SKIPPED: 0 assertions
                                  ❌  FAILED: 2 assertion
                                
                                ========== ======= ==========
                                ```
                                
                                ## Documentation
                                
                                ### *Compatibility*
                                
                                Unitt supports both: XUnit and RSpec-like syntax.
                                
                                The 1st version was heavily influenced by XUnit.
                                The 2nd one introduced a RSpec-inspired syntax alternatively, which is now the recommended one.
                                
                                ### *Rpec-ish API*
                                
                                - `describe: $[description :string tests :block]`:
                                    Groups tests around some feature.
                                - `it: $[description :string, testCase :block]`:
                                    The test case itself, you need to pass a clear description to it,
                                    And the logic that you're trying to assert.
                                    - `.skip :logical`:
                                        Skips tests for some condition. 
                                        Will just skip if no condition is provided.
                                - `expects: $[condition :block]`:
                                    A function that is only available inside the `it`/`test` case,
                                    makes an assertion given the `condition`.
                                    - `.to :literal` (or `.be`)
                                        Uses some function to evaluate the statement.
                                        This helps to show the function name on display, 
                                        instead of a `true`/`false`.
                                
                                ### *XUnit-ish API*
                                
                                - `test: $[description :string, testCase :block]`:
                                    The same as `it`. 
                                    - `.skip :logical`
                                - `assert: $[condition :block]`:
                                    The same as `expects`
                                    - `.with`
                                        The same as `.to` and `.be`
                                - `suite: $[description :string tests :block]`:
                                    The same as `describe`.
                                
                                
                                ## Breaking Changes
                                
                                There are some breaking changes from the latest major version, so make sure you've some time to change it before update.
                                
                                1. Script Runner: now, you don't need to setup a script runner anymore. Just delete it. Arturo's package manager has included the feature of script entries for packages, so you can run it such as a common CLI application out-of the box, such like pipx and npx.
                                2. `test.prop`/`it.prop`: I've added this for property-based tests, but honestly this does absolutely nothing. This attribute just replaces `-` by a `~`. Your test description should be semantic enough to know if this is use-case based or property based. This also reduces a lot the complexity of the library, making it less error-prone.
                                3. `assert.static`/`expected.static`: This was added when I had no idea how well my evaluator would be. Now, I think this is mature enough to just don't use it at all. Static assertions are not that useful when debugging tests, either. If you need something similar, transform your expression into a `:string`.
                                4. `fatal`: This was very useful since then, but the way our architecture works now, I think this is kind-of useless. In summary: If some test has an uncaught exception, this stops unitt and shows you the error. For failing tests, you can use the `--clean` flag to show only failing specs.
                                
                                
                                > [!WARNING]
                                > Never import this lib as `.lean`, or this will break the current code.
                                > This happens due to the nature of Arturo (being concatenative), 
                                > and the way we importings are working right now.
                                > This may change in future.
                                
                                ---
                                
                                > Background photo on ["At a Glance"](#at-a-glance)  
                                > by [Luca Bravo](https://unsplash.com/@lucabravo?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash) 
                                > on [Unsplash](https://unsplash.com/photos/boat-docked-near-house-VowIFDxogG4?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
                                
                        }
                        license: #[
                                name: "MIT"
                                url: "https://choosealicense.com/licenses/mit/"
                        ]
                ]
                url: "https://api.github.com/repos/RickBarretto/unitt/zipball/v3.0.0-pre1"
                info: #[
                        entry: "src/unitt.art"
                        executable: "src/script.art"
                        depends: [

                        ]
                        requires: [
                                >
                                 0.9.84
                        ]
                        name: "unitt"
                        description: "Lean unit testing tool for Arturo"
                        license: "MIT"
                        authors: [
                                "RickBarretto"
                        ]
                        homepage: "https://unitt.pkgr.art"
                        repository: "https://github.com/rickbarretto/unitt"
                        keywords: [
                                arturo
                                 testing
                                 unittesting
                                 cli
                        ]
                        categories: [
                                development
                                 tool
                        ]
                ]
        ]
         #[
                version: 3.0.0-pre0
                date: to :date "2025-07-13T15:17:08+00:00"
                link: "https://github.com/RickBarretto/unitt/releases/tag/v3.0.0-pre0"
                details: #[
                        size: 2195482
                        files: 43
                        readme: {
                                <h1 align="center">
                                    Unitt
                                </h1>
                                
                                <p align="center">
                                    <i>Unitt</i> is a lean unit-test tool for the 
                                    <a href="https://github.com/arturo-lang/arturo/">
                                        Arturo Programming language
                                    </a>
                                    <br><br>
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo.png#gh-light-mode-only"
                                    />
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo-lightgray.png#gh-dark-mode-only" 
                                    />
                                </p>
                                
                                ## At a Glance
                                
                                <p align="center">
                                <img 
                                    alt="Running Unitt from terminal (v2)"
                                    width="720"
                                    src="./docs/running unitt screenshot.png"
                                />
                                </p>
                                
                                ## Trying Unitt
                                
                                **Installation**
                                
                                ```
                                arturo -p install unitt
                                ```
                                
                                **Setup & Execution**
                                
                                Create the file `test` on the root of your project:
                                
                                ```art
                                #! arturo
                                
                                import {unitt}!
                                
                                tryOr: $[action :block alt :any][
                                    (throws? [val:] ++ action)? -> alt -> val
                                ]
                                
                                files: switch empty? args\values
                                    -> findTests "tests"
                                    -> args\values
                                
                                runTests
                                    .fatal: tryOr [args\fatal] false
                                    .suppress: tryOr [args\suppress] false
                                    files
                                ```
                                
                                ```sh
                                # Runs test/test*.art by default
                                ./test
                                ```
                                
                                ```sh
                                # Glob Pattern from Shell
                                ./test test/*test.art
                                ```
                                
                                ### Testing code
                                
                                A real example of tests:
                                
                                ```art
                                import {unitt}!
                                
                                unix?: true
                                
                                describe "binary appending" [
                                    it "should operate integers" [
                                        b: to :binary 0
                                        expects.be: 'equal? @[as.binary 2 append b 1]
                                        expects.be: 'equal? @[as.binary 1 b ++ 1]
                                    ]
                                
                                    it "should return a binary" [
                                        b: to :binary 0
                                        expects.be: 'binary? @[append b 1]
                                        expects.be: 'binary? @[b ++ 1]
                                    ]
                                ]
                                
                                test.skip: unix? "split should deal with windows's paths" [
                                    expects.be: 'equal? @[
                                        ["." "splited" "path"]
                                        split.path ".\\splited\\path"
                                    ]
                                ]
                                
                                test "split should deal with unix path" [
                                    expects.be: 'equal? @[
                                        ["." "splited" "path"] 
                                        split.path "./splited/path"
                                    ]
                                ]
                                ```
                                
                                This will show you:
                                
                                ```
                                ===== example.art =====
                                
                                Suite: binary appending 
                                
                                    ❌ - assert that should operate integers
                                         ❌: equal? 10 00 01
                                         ❌: equal? 1 00 01
                                
                                    ✅ - assert that should return a binary
                                         ✅: binary? 00 01
                                         ✅: binary? 00 01
                                
                                
                                ⏩ - assert that split should deal with windows's paths
                                     skipped!
                                
                                ✅ - assert that split should deal with unix path
                                     ✅: equal? ["." "splited" "path"] ["." "splited" "path"]
                                
                                
                                ===== Statistics =====
                                
                                 ⏏️   TOTAL: 3 assertions
                                ✅  PASSED: 2 assertions
                                ⏩ SKIPPED: 1 assertions
                                ❌  FAILED: 1 assertions
                                
                                ===== ========== =====
                                ```
                                
                                ## Documentation
                                
                                ### *Unitt*
                                - `describe: $[description :string tests :block]`:
                                    Groups tests around some feature.
                                - `it: $[description :string, testCase :block]`:
                                    The test case itself, you need to pass a clear description to it,
                                    And the logic that you're trying to assert.
                                    - `.prop`:
                                        Indicates that a test is property-based.
                                        The indicator is the `~` separator on the description.
                                    - `.skip :logical`:
                                        Skips tests for some condition. 
                                        Will just skip if no condition is provided.
                                - `expects: $[condition :block]`:
                                    A function that is only available inside the `it`/`test` case,
                                    makes an assertion given the `condition`.
                                    - `.to :literal` (or `.be`)
                                        Uses some function to evaluate the statement.
                                        This helps to show the function name on display, 
                                        instead of a `true`/`false`.
                                    - `.static :logical`:
                                        Shows it as static code.
                                
                                
                                ## *Compatibility*
                                
                                This section includes the old-syntax inspired by XUnit. 
                                Kept for compatibilities with our 1st version.
                                
                                - `test: $[description :string, testCase :block]`:
                                    The same as `it`. 
                                    Not only kept for compatibility issues,
                                    but great to be used when not into a `describe`/`suite` block.
                                    - `.prop`
                                    - `.skip :logical`
                                - `assert: $[condition :block]`:
                                    The same as `expects`
                                    - `.with`
                                        The same as `.to` and `.be`
                                     - `.static: :logical`
                                - `suite: $[description :string tests :block]`:
                                    The same as `describe`.
                                
                                ### *Setup*
                                - `runTests: $[tests [:string]]`:
                                    The *runner function*, this executes all `tests`,
                                    show statistics and return a value. 
                                    - `.fatal`:
                                        Fails on the first error found (per file).
                                    - `.suppress`: 
                                        Always return 0 as error code. 
                                - `findTests: $[folder :string]`:
                                    Looks for *tests* inside `folder`.
                                    The default *test* pattern is "test*.art".
                                    - `.thatMatches :string`:
                                        Defines what is a test-file via a kind-of *glob* pattern.
                                        Use a `*` as spliter. 
                                        - Obs.: That is a kind-of *glob* pattern, not a real one. 
                                          So just use one and only one `*` to split the pre and suffix.
                                
                                
                                > [!WARNING]
                                > Never import this lib as `.lean`, or this will break the current code.
                                > This happens due to the nature of Arturo (being concatenative), 
                                > and the way we importings are working right now.
                                > This may change in future.
                                
                                ---
                                
                                > Background photo on ["At a Glance"](#at-a-glance) 
                                by [Artem Sapegin](https://unsplash.com/@sapegin?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash) 
                                on [Unsplash](https://unsplash.com/photos/brown-wooden-boat-floating-on-body-of-water-XGDBdSQ70O0?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
                                      
                                
                        }
                        license: #[
                                name: "MIT"
                                url: "https://choosealicense.com/licenses/mit/"
                        ]
                ]
                url: "https://api.github.com/repos/RickBarretto/unitt/zipball/v3.0.0-pre0"
                info: #[
                        entry: "src/unitt.art"
                        executable: "src/script.art"
                        depends: [

                        ]
                        requires: [
                                >
                                 0.9.84
                        ]
                        name: "unitt"
                        description: "Lean unit testing tool for Arturo"
                        license: "MIT"
                        authors: [
                                "RickBarretto"
                        ]
                        homepage: "https://unitt.pkgr.art"
                        repository: "https://github.com/rickbarretto/unitt"
                        keywords: [
                                arturo
                                 testing
                                 unittesting
                                 cli
                        ]
                        categories: [
                                development
                                 tool
                        ]
                ]
        ]
         #[
                version: 2.0.1
                date: to :date "2025-02-17T14:58:29+00:00"
                link: "https://github.com/RickBarretto/unitt/releases/tag/v2.0.1"
                details: #[
                        size: 2089281
                        files: 18
                        readme: {
                                <h1 align="center">
                                    Unitt
                                </h1>
                                
                                <p align="center">
                                    <i>Unitt</i> is a lean unit-test tool for the 
                                    <a href="https://github.com/arturo-lang/arturo/">
                                        Arturo Programming language
                                    </a>
                                    <br><br>
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo.png#gh-light-mode-only"
                                    />
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo-lightgray.png#gh-dark-mode-only" 
                                    />
                                </p>
                                
                                ## At a Glance
                                
                                <p align="center">
                                <img 
                                    alt="Running Unitt from terminal (v2)"
                                    width="720"
                                    src="./docs/running unitt screenshot.png"
                                />
                                </p>
                                
                                ## Trying Unitt
                                
                                **Installation**
                                
                                ```
                                arturo -p install unitt
                                ```
                                
                                **Setup & Execution**
                                
                                Create the file `test` on the root of your project:
                                
                                ```art
                                #! arturo
                                
                                import {unitt}!
                                
                                tryOr: $[action :block alt :any][
                                    (throws? [val:] ++ action)? -> alt -> val
                                ]
                                
                                files: switch empty? args\values
                                    -> findTests "tests"
                                    -> args\values
                                
                                runTests
                                    .fatal: tryOr [args\fatal] false
                                    .suppress: tryOr [args\suppress] false
                                    files
                                ```
                                
                                ```sh
                                # Runs test/test*.art by default
                                ./test
                                ```
                                
                                ```sh
                                # Glob Pattern from Shell
                                ./test test/*test.art
                                ```
                                
                                ### Testing code
                                
                                A real example of tests:
                                
                                ```art
                                import {unitt}!
                                
                                unix?: true
                                
                                describe "binary appending" [
                                    it "should operate integers" [
                                        b: to :binary 0
                                        expects.be: 'equal? @[as.binary 2 append b 1]
                                        expects.be: 'equal? @[as.binary 1 b ++ 1]
                                    ]
                                
                                    it "should return a binary" [
                                        b: to :binary 0
                                        expects.be: 'binary? @[append b 1]
                                        expects.be: 'binary? @[b ++ 1]
                                    ]
                                ]
                                
                                test.skip: unix? "split should deal with windows's paths" [
                                    expects.be: 'equal? @[
                                        ["." "splited" "path"]
                                        split.path ".\\splited\\path"
                                    ]
                                ]
                                
                                test "split should deal with unix path" [
                                    expects.be: 'equal? @[
                                        ["." "splited" "path"] 
                                        split.path "./splited/path"
                                    ]
                                ]
                                ```
                                
                                This will show you:
                                
                                ```
                                ===== example.art =====
                                
                                Suite: binary appending 
                                
                                    ❌ - assert that should operate integers
                                         ❌: equal? 10 00 01
                                         ❌: equal? 1 00 01
                                
                                    ✅ - assert that should return a binary
                                         ✅: binary? 00 01
                                         ✅: binary? 00 01
                                
                                
                                ⏩ - assert that split should deal with windows's paths
                                     skipped!
                                
                                ✅ - assert that split should deal with unix path
                                     ✅: equal? ["." "splited" "path"] ["." "splited" "path"]
                                
                                
                                ===== Statistics =====
                                
                                 ⏏️   TOTAL: 3 assertions
                                ✅  PASSED: 2 assertions
                                ⏩ SKIPPED: 1 assertions
                                ❌  FAILED: 1 assertions
                                
                                ===== ========== =====
                                ```
                                
                                ## Documentation
                                
                                ### *Unitt*
                                - `describe: $[description :string tests :block]`:
                                    Groups tests around some feature.
                                - `it: $[description :string, testCase :block]`:
                                    The test case itself, you need to pass a clear description to it,
                                    And the logic that you're trying to assert.
                                    - `.prop`:
                                        Indicates that a test is property-based.
                                        The indicator is the `~` separator on the description.
                                    - `.skip :logical`:
                                        Skips tests for some condition. 
                                        Will just skip if no condition is provided.
                                - `expects: $[condition :block]`:
                                    A function that is only available inside the `it`/`test` case,
                                    makes an assertion given the `condition`.
                                    - `.to :literal` (or `.be`)
                                        Uses some function to evaluate the statement.
                                        This helps to show the function name on display, 
                                        instead of a `true`/`false`.
                                    - `.static :logical`:
                                        Shows it as static code.
                                
                                
                                ## *Compatibility*
                                
                                This section includes the old-syntax inspired by XUnit. 
                                Kept for compatibilities with our 1st version.
                                
                                - `test: $[description :string, testCase :block]`:
                                    The same as `it`. 
                                    Not only kept for compatibility issues,
                                    but great to be used when not into a `describe`/`suite` block.
                                    - `.prop`
                                    - `.skip :logical`
                                - `assert: $[condition :block]`:
                                    The same as `expects`
                                    - `.with`
                                        The same as `.to` and `.be`
                                     - `.static: :logical`
                                - `suite: $[description :string tests :block]`:
                                    The same as `describe`.
                                
                                ### *Setup*
                                - `runTests: $[tests [:string]]`:
                                    The *runner function*, this executes all `tests`,
                                    show statistics and return a value. 
                                    - `.fatal`:
                                        Fails on the first error found (per file).
                                    - `.suppress`: 
                                        Always return 0 as error code. 
                                - `findTests: $[folder :string]`:
                                    Looks for *tests* inside `folder`.
                                    The default *test* pattern is "test*.art".
                                    - `.thatMatches :string`:
                                        Defines what is a test-file via a kind-of *glob* pattern.
                                        Use a `*` as spliter. 
                                        - Obs.: That is a kind-of *glob* pattern, not a real one. 
                                          So just use one and only one `*` to split the pre and suffix.
                                
                                
                                > [!WARNING]
                                > Never import this lib as `.lean`, or this will break the current code.
                                > This happens due to the nature of Arturo (being concatenative), 
                                > and the way we importings are working right now.
                                > This may change in future.
                                
                                ---
                                
                                > Background photo on ["At a Glance"](#at-a-glance) 
                                by [Artem Sapegin](https://unsplash.com/@sapegin?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash) 
                                on [Unsplash](https://unsplash.com/photos/brown-wooden-boat-floating-on-body-of-water-XGDBdSQ70O0?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
                                      
                                
                        }
                        license: #[
                                name: "MIT"
                                url: "https://choosealicense.com/licenses/mit/"
                        ]
                ]
                url: "https://api.github.com/repos/RickBarretto/unitt/zipball/v2.0.1"
                info: #[
                        entry: "src/unitt.art"
                        depends: [

                        ]
                        requires: [
                                >
                                 0.9.84
                        ]
                        executable: false
                ]
        ]
         #[
                version: 1.1.2
                date: to :date "2024-03-27T01:09:56+00:00"
                link: "https://github.com/RickBarretto/unitt/releases/tag/v1.1.2"
                details: #[
                        size: 2924568
                        files: 40
                        readme: {
                                <h1 align="center">
                                    Unitt
                                </h1>
                                
                                <p align="center">
                                    <i>Unitt</i> is a basic unit-test tool for the 
                                    <a href="https://github.com/arturo-lang/arturo/">
                                        Arturo Programming language
                                    </a>
                                    <br><br>
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo.png#gh-light-mode-only"
                                    />
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo-lightgray.png#gh-dark-mode-only" 
                                    />
                                </p>
                                
                                ## At a Glance
                                
                                <p align="center">
                                <img 
                                    alt="Running Unitt from terminal"
                                    width="720"
                                    src="./docs/running unitt screenshot.png"
                                />
                                </p>
                                
                                ## Trying Unitt
                                
                                *Unitt* may be splited into two sections: *runner* and *the tests*.
                                
                                *The runner* is the section responsible to find, run and return error codes to the final user.
                                While *the tests* are responsible to group the rules and logic of the tests.
                                
                                ### Initial setup
                                
                                It's recomended that your *tester* be at the root of your directory, right before your *tests* folder.
                                
                                All of your *tests* must begin with the `test` prefix and end with the `.art` extension to be found,
                                since you may want to mix them with some other files.
                                
                                Being that said, that is the right way of setting up your *tester*:
                                
                                Let's consider that you have the following directory:
                                
                                ```
                                src/
                                    ...
                                tests/
                                    ...
                                main.art
                                tester.art
                                ```
                                
                                Into your `tester.art`, you must:
                                
                                ```art
                                import {unitt}!
                                
                                runTests findTests "tests"
                                ```
                                
                                To run it, call:
                                
                                ```
                                arturo tester.art
                                ```
                                
                                > [!TIP] 
                                > You may want to use a hashbang to don't need to call arturo for every run.
                                
                                > [!TIP]
                                > If you want be able to test some specific tests from the CLI, you can:
                                > ```art
                                >  import {unitt}!
                                >  
                                >  runTests (empty? arg)? 
                                >      -> findTests "tests"
                                >      -> arg
                                > ```
                                
                                ### The *tests* itself
                                
                                A real example of tests:
                                
                                ```art
                                import {unitt}!
                                
                                unix?: true
                                
                                suite "test binary appending" [
                                    test "operation with integer works" [
                                        b: to :binary 0
                                        assert -> as.binary 2 = append b 1
                                        assert -> as.binary 1 = b ++ 1
                                    ]
                                
                                    test.prop "operate binaries with integer returns a binary" [
                                        b: to :binary 0
                                        assert -> binary? append b 1
                                        assert -> binary? b ++ 1
                                    ]
                                ]
                                
                                test.skip: unix? "split works for windows's paths" [
                                    assert -> ["." "splited" "path"] = split.path ".\\splited\\path"
                                ]
                                
                                test "split is works for unix path" [
                                    assert -> ["." "splited" "path"] = split.path "./splited/path"
                                ]
                                ```
                                
                                This will show you:
                                
                                ```
                                Suite: test binary appending 
                                
                                    ❌ - assert that operation with integer works
                                         assertion: as .binary 2 = append  1
                                
                                    ❌ - assert that operation with integer works
                                         assertion: as .binary 1 =  ++ 1
                                
                                    ✅ ~ assert that operate binaries with integer returns a binary
                                         assertion: binary? append  1
                                
                                    ✅ ~ assert that operate binaries with integer returns a binary
                                         assertion: binary?  ++ 1
                                
                                
                                ⏩ - assert that split works for windows's paths 
                                     skipped!
                                
                                ✅ - assert that split is works for unix path
                                     assertion: ["." "splited" "path"] = split .path "./splited/path"
                                ```
                                
                                > [!NOTE]
                                > Property-based tests have `~` as separator. 
                                
                                ### The *Runner*
                                
                                Basically, you can run your *tests units* without a *runner*. 
                                But there are some reasons why you should prefer to use a `runTests` function to run them.
                                
                                First, your *runner*'s output will give you important information about the current run.
                                This will show you the file being runned, 
                                the tests's status
                                and at the end a summary of failed, skipped and passed tests:
                                
                                ```
                                ===== Statistics =====
                                
                                ⏏️   TOTAL: 24 assertions
                                ✅  PASSED: 20 assertions
                                ⏩ SKIPPED: 4 assertions
                                ❌  FAILED: 4 assertions
                                
                                ===== ========== =====
                                ```
                                
                                Also, the runner is able to return an error code, 
                                so that is great if you're working with *Continuous Integration*.
                                
                                ## Documentation
                                
                                ### *Runner*
                                - `runTests: $[tests [:string]]`:
                                    The *runner function*, this executes all `tests`,
                                    show statistics and return a value. 
                                    - `.failFast`:
                                        Fails on the first error found. 
                                        This works at file scope due to our current way of running tests.
                                    - `.suppress`: 
                                        Suppress `panic`, this means: 
                                        this won't terminate your tests, 
                                        won't return an error code
                                        and won't print a `panic` message. 
                                - `findTests: $[folder :string]`:
                                    The *finder function*, this function will look for *tests* inside the relative `folder`.
                                    The default *test* pattern is "test*.art".
                                    - `.thatMatches :string`:
                                        Defines what is a test-file via a kind-of *glob* pattern.
                                        Use a `*` as spliter. 
                                        - Obs.: That is a kind-of *glob* pattern, not a real one. 
                                          So just use one and only one `*` to split the pre and suffix.
                                
                                ### *Tests*
                                - `test: $[description :string, testCase :block]`:
                                    The test case itself, you need to pass a clear description to it,
                                    And the logic that you're trying to assert.
                                    - `.prop`:
                                        Indicates that a test is property-based.
                                    - `.skip :logical`:
                                        Skips tests for some condition. 
                                        If none condition is given, this will just skip the test.
                                    - `.static: :block`:
                                        Defines what will and what won't be evaluated.
                                    - `.static: :logical`:
                                        Disable runtime evaluation, and forces static display.
                                - `assert: $[condition :block]`:
                                    A function that is only available inside the `test` case,
                                    makes an assertion given the `condition`.
                                - `suite: $[description :string tests :block]`:
                                    Visually groups tests together.
                                
                                
                                > [!WARNING]
                                > Never import this lib as `.lean`, or this will break the current code.
                                > This happens due to the nature of Arturo (being concatenative), 
                                > and the way we importings are working right now.
                                > This may change in future.
                                
                                ---
                                
                                > Background photo on ["At a Glance"](#at-a-glance) 
                                  by [Jack Anstey](https://unsplash.com/@jack_anstey?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash) on [Unsplash](https://unsplash.com/photos/aerial-photography-of-road-zS4lUqLEiNA?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
                        }
                        license: #[
                                name: "MIT"
                                url: "https://choosealicense.com/licenses/mit/"
                        ]
                ]
                url: "https://api.github.com/repos/RickBarretto/unitt/zipball/v1.1.2"
                info: #[
                        entry: "unitt.art"
                        depends: [

                        ]
                        requires: [
                                >
                                 0.9.83
                        ]
                        executable: false
                ]
        ]
         #[
                version: 1.0.0
                date: to :date "2024-02-17T20:48:40+00:00"
                link: "https://github.com/RickBarretto/unitt/releases/tag/v1.0.0"
                details: #[
                        size: 2924560
                        files: 40
                        readme: {
                                <h1 align="center">
                                    Unitt
                                </h1>
                                
                                <p align="center">
                                    <i>Unitt</i> is a basic unit-test tool for the 
                                    <a href="https://github.com/arturo-lang/arturo/">
                                        Arturo Programming language
                                    </a>
                                    <br><br>
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo.png#gh-light-mode-only"
                                    />
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo-lightgray.png#gh-dark-mode-only" 
                                    />
                                </p>
                                
                                ## At a Glance
                                
                                <p align="center">
                                <img 
                                    alt="Running Unitt from terminal"
                                    width="720"
                                    src="./docs/running unitt screenshot.png"
                                />
                                </p>
                                
                                ## Trying Unitt
                                
                                *Unitt* may be splited into two sections: *runner* and *the tests*.
                                
                                *The runner* is the section responsible to find, run and return error codes to the final user.
                                While *the tests* are responsible to group the rules and logic of the tests.
                                
                                ### Initial setup
                                
                                It's recomended that your *tester* be at the root of your directory, right before your *tests* folder.
                                
                                All of your *tests* must begin with the `test` prefix and end with the `.art` extension to be found,
                                since you may want to mix them with some other files.
                                
                                Being that said, that is the right way of setting up your *tester*:
                                
                                Let's consider that you have the following directory:
                                
                                ```
                                src/
                                    ...
                                tests/
                                    ...
                                main.art
                                tester.art
                                ```
                                
                                Into your `tester.art`, you must:
                                
                                ```art
                                import {unitt}!
                                
                                runTests findTests "tests"
                                ```
                                
                                To run it, call:
                                
                                ```
                                arturo tester.art
                                ```
                                
                                > [!TIP] 
                                > You may want to use a hashbang to don't need to call arturo for every run.
                                
                                > [!TIP]
                                > If you want be able to test some specific tests from the CLI, you can:
                                > ```art
                                >  import {unitt}!
                                >  
                                >  runTests (empty? arg)? 
                                >      -> findTests "tests"
                                >      -> arg
                                > ```
                                
                                ### The *tests* itself
                                
                                A real example of tests:
                                
                                ```art
                                import {unitt}!
                                
                                unix?: true
                                
                                suite "test binary appending" [
                                    test "operation with integer works" [
                                        b: to :binary 0
                                        assert -> as.binary 2 = append b 1
                                        assert -> as.binary 1 = b ++ 1
                                    ]
                                
                                    test.prop "operate binaries with integer returns a binary" [
                                        b: to :binary 0
                                        assert -> binary? append b 1
                                        assert -> binary? b ++ 1
                                    ]
                                ]
                                
                                test.skip: unix? "split works for windows's paths" [
                                    assert -> ["." "splited" "path"] = split.path ".\\splited\\path"
                                ]
                                
                                test "split is works for unix path" [
                                    assert -> ["." "splited" "path"] = split.path "./splited/path"
                                ]
                                ```
                                
                                This will show you:
                                
                                ```
                                Suite: test binary appending 
                                
                                    ❌ - assert that operation with integer works
                                         assertion: as .binary 2 = append  1
                                
                                    ❌ - assert that operation with integer works
                                         assertion: as .binary 1 =  ++ 1
                                
                                    ✅ ~ assert that operate binaries with integer returns a binary
                                         assertion: binary? append  1
                                
                                    ✅ ~ assert that operate binaries with integer returns a binary
                                         assertion: binary?  ++ 1
                                
                                
                                ⏩ - assert that split works for windows's paths 
                                     skipped!
                                
                                ✅ - assert that split is works for unix path
                                     assertion: ["." "splited" "path"] = split .path "./splited/path"
                                ```
                                
                                > [!NOTE]
                                > Property-based tests have `~` as separator. 
                                
                                ### The *Runner*
                                
                                Basically, you can run your *tests units* without a *runner*. 
                                But there are some reasons why you should prefer to use a `runTests` function to run them.
                                
                                First, your *runner*'s output will give you important information about the current run.
                                This will show you the file being runned, 
                                the tests's status
                                and at the end a summary of failed, skipped and passed tests:
                                
                                ```
                                ===== Statistics =====
                                
                                ⏏️   TOTAL: 24 assertions
                                ✅  PASSED: 20 assertions
                                ⏩ SKIPPED: 4 assertions
                                ❌  FAILED: 4 assertions
                                
                                ===== ========== =====
                                ```
                                
                                Also, the runner is able to return an error code, 
                                so that is great if you're working with *Continuous Integration*.
                                
                                ## Documentation
                                
                                ### *Runner*
                                - `runTests: $[tests [:string]]`:
                                    The *runner function*, this executes all `tests`,
                                    show statistics and return a value. 
                                    - `.failFast`:
                                        Fails on the first error found. 
                                        This works at file scope due to our current way of running tests.
                                    - `.suppress`: 
                                        Suppress `panic`, this means: 
                                        this won't terminate your tests, 
                                        won't return an error code
                                        and won't print a `panic` message. 
                                - `findTests: $[folder :string]`:
                                    The *finder function*, this function will look for *tests* inside the relative `folder`.
                                    The default *test* pattern is "test*.art".
                                    - `.thatMatches :string`:
                                        Defines what is a test-file via a kind-of *glob* pattern.
                                        Use a `*` as spliter. 
                                        - Obs.: That is a kind-of *glob* pattern, not a real one. 
                                          So just use one and only one `*` to split the pre and suffix.
                                
                                ### *Tests*
                                - `test: $[description :string, testCase :block]`:
                                    The test case itself, you need to pass a clear description to it,
                                    And the logic that you're trying to assert.
                                    - `.prop`:
                                        Indicates that a test is property-based.
                                    - `.skip :logical`:
                                        Skips tests for some condition. 
                                        If none condition is given, this will just skip the test.
                                    - `.static: :block`:
                                        Defines what will and what won't be evaluated.
                                    - `.static: :logical`:
                                        Disable runtime evaluation, and forces static display.
                                - `assert: $[condition :block]`:
                                    A function that is only available inside the `test` case,
                                    makes an assertion given the `condition`.
                                - `suite: $[description :string tests :block]`:
                                    Visually groups tests together.
                                
                                
                                > [!WARNING]
                                > Never import this lib as `.lean`, or this will break the current code.
                                > This happens due to the nature of Arturo (being concatenative), 
                                > and the way we importings are working right now.
                                > This may change in future.
                                
                                ---
                                
                                > Background photo on ["At a Glance"](#at-a-glance) 
                                  by [Jack Anstey](https://unsplash.com/@jack_anstey?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash) on [Unsplash](https://unsplash.com/photos/aerial-photography-of-road-zS4lUqLEiNA?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
                        }
                        license: #[
                                name: "MIT"
                                url: "https://choosealicense.com/licenses/mit/"
                        ]
                ]
                url: "https://api.github.com/repos/RickBarretto/unitt/zipball/v1.0.0"
                info: #[
                        entry: "unitt.art"
                        depends: [

                        ]
                        requires: [
                                >
                                 0.9.83
                        ]
                        executable: false
                ]
        ]
         #[
                version: 0.2.0
                date: to :date "2024-02-17T03:19:20+00:00"
                link: "https://github.com/RickBarretto/unitt/releases/tag/v0.2.0"
                details: #[
                        size: 2819071
                        files: 40
                        readme: {
                                <h1 align="center">
                                    Unitt
                                </h1>
                                
                                <p align="center">
                                    <i>Unitt</i> is a basic unit-test tool for the 
                                    <a href="https://github.com/arturo-lang/arturo/">
                                        Arturo Programming language
                                    </a>
                                    <br><br>
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo.png#gh-light-mode-only"
                                    />
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo-lightgray.png#gh-dark-mode-only" 
                                    />
                                </p>
                                
                                ## At a Glance
                                
                                <p align="center">
                                <img 
                                    alt="Running Unitt from terminal"
                                    width="720"
                                    src="./docs/running unitt screenshot.png"
                                />
                                </p>
                                
                                ## Trying Unitt
                                
                                *Unitt* may be splited into two sections: *runner* and *the tests*.
                                
                                *The runner* is the section responsible to find, run and return error codes to the final user.
                                While *the tests* are responsible to group the rules and logic of the tests.
                                
                                ### Initial setup
                                
                                It's recomended that your *runner* be at the root of your directory, right before your *tests* folder.
                                
                                All of your *tests* must begin with the `test` prefix and end with the `.art` extension to be found,
                                since you may want to mix them with some other files.
                                
                                Being that said, that is the right way of setting up your *runner*:
                                
                                Let's consider that you have the following directory:
                                
                                ```
                                src/
                                    ...
                                tests/
                                    ...
                                main.art
                                tester.art
                                ```
                                
                                Into your `tester.art`, you must:
                                
                                ```art
                                import {unitt}!
                                
                                runTests "tests"
                                ```
                                
                                To run it, call:
                                
                                ```
                                arturo tester.art
                                ```
                                
                                > [!TIP] 
                                > You may want to use a hashbang to don't need to call arturo for every run.
                                
                                ### The *tests* itself
                                
                                A real example of tests:
                                
                                ```art
                                unix?: true
                                
                                test "appending binaries with integer is working" [
                                    b: to :binary 0
                                    assert -> as.binary 2 = append b 1
                                    assert -> as.binary 1 = b ++ 1
                                ]
                                
                                test.prop "appending binaries with integer returns a binary" [
                                    b: to :binary 0
                                    assert -> binary? append b 1
                                    assert -> binary? b ++ 1
                                ]
                                
                                test.skip: unix? "split is working for windows's paths" [
                                    assert -> ["." "splited" "path"] = split.path ".\\splited\\path"
                                ]
                                ```
                                
                                This will show you:
                                
                                ```
                                ❌ - assert that appending binaries with integer is working
                                     assertion : [as binary 1 = append b 1]
                                
                                ✅ - assert that appending binaries with integer is working
                                     assertion : [as binary 1 = b ++ 1]
                                
                                ✅ ~ assert that appending binaries with integer returns a binary
                                     assertion : [binary? append b 1]
                                
                                ✅ - assert that appending binaries with integer returns a binary
                                     assertion : [binary? b ++ 1]
                                
                                ⏩ - assert that split is working for windows's paths      
                                      skipped!
                                ```
                                
                                > [!NOTE]
                                > Property-based tests have `~` as separator. 
                                
                                ### The *Runner*
                                
                                Basically, you can run your *tests units* without a *runner*. 
                                But there are some reasons why you should prefer to use a `runTests` function to run them.
                                
                                First, your *runner*'s output will give you important information about the current run.
                                This will show you the file being runned, 
                                the tests's status
                                and at the end a summary of failed, skipped and passed tests:
                                
                                ```
                                ===== Statistics =====
                                
                                ⏏️   TOTAL: 24 assertions
                                ✅  PASSED: 20 assertions
                                ⏩ SKIPPED: 4 assertions
                                ❌  FAILED: 4 assertions
                                
                                ===== ========== =====
                                ```
                                
                                Also, the runner is able to return an error code, 
                                so that is great if you're working with *Continuous Integration*.
                                
                                ## Documentation
                                
                                ### *Runner*
                                - `runTests: $[folder :string]`:
                                    The *runner function*, this function will look for *tests* inside the relative `folder`.
                                    Remember that all *tests* must begin with the `test` prefix, and be an `.art` extension.
                                    - `.failFast`:
                                        Fails on the first error found. 
                                        This works at file scope due to our current way of running tests.
                                    - `.pattern :string`:
                                        Defines what is a test-file via a kind-of *glob* pattern.
                                        Use a `*` as spliter. 
                                        - Obs.: That is a kind-of *glob* pattern, not a real one. 
                                          So just use one and only one `*` to split the pre and suffix.
                                    - `.suppress`: 
                                        Suppress `panic`, this means: 
                                        this won't terminate your tests, 
                                        won't return an error code
                                        and won't print a `panic` message. 
                                
                                ### *Tests*
                                - `test: $[description :string, testCase :block]`:
                                    The test case itself, you need to pass a clear description to it,
                                    And the logic that you're trying to assert.
                                    - `.prop`:
                                        Indicates that a test is property-based.
                                    - `.skip :logical`:
                                        Skips tests for some condition. 
                                        If none condition is given, this will just skip the test.
                                    - `.static: :block`:
                                        Defines what will and what won't be evaluated.
                                    - `.static: :logical`:
                                        Disable runtime evaluation, and forces static display.
                                - `assert: $[condition :block]`:
                                    A function that is only available inside the `test` case,
                                    makes an assertion given the `condition`.
                                - `suite: $[description :string tests :block]`:
                                    Visually groups tests together.
                                
                                
                                > [!WARNING]
                                > Never import this lib as `.lean`, or this will break the current code.
                                > This happens due to the nature of Arturo (being concatenative), 
                                > and the way we importings are working right now.
                                > This may change in future.
                                
                                ---
                                
                                > Background photo on ["At a Glance"](#at-a-glance) 
                                  by [Jack Anstey](https://unsplash.com/@jack_anstey?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash) on [Unsplash](https://unsplash.com/photos/aerial-photography-of-road-zS4lUqLEiNA?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
                        }
                        license: #[
                                name: "MIT"
                                url: "https://choosealicense.com/licenses/mit/"
                        ]
                ]
                url: "https://api.github.com/repos/RickBarretto/unitt/zipball/v0.2.0"
                info: #[
                        entry: "unitt.art"
                        depends: [

                        ]
                        requires: [
                                >
                                 0.9.83
                        ]
                        executable: false
                ]
        ]
         #[
                version: 0.1.4
                date: to :date "2024-02-03T00:41:47+00:00"
                link: "https://github.com/RickBarretto/unitt/releases/tag/v0.1.4"
                details: #[
                        size: 2810315
                        files: 35
                        readme: {
                                <h1 align="center">
                                    Unitt
                                </h1>
                                
                                <p align="center">
                                    <i>Unitt</i> is a basic unit-test tool for the 
                                    <a href="https://github.com/arturo-lang/arturo/">
                                        Arturo Programming language
                                    </a>
                                    <br><br>
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo.png#gh-light-mode-only"
                                    />
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo-lightgray.png#gh-dark-mode-only" 
                                    />
                                </p>
                                
                                ## At a Glance
                                
                                <p align="center">
                                <img 
                                    alt="Running Unitt from terminal"
                                    width="720"
                                    src="./docs/running unitt screenshot.png"
                                />
                                </p>
                                
                                ## Trying Unitt
                                
                                *Unitt* may be splited into two sections: *runner* and *the tests*.
                                
                                *The runner* is the section responsible to find, run and return error codes to the final user.
                                While *the tests* are responsible to group the rules and logic of the tests.
                                
                                ### Initial setup
                                
                                It's recomended that your *runner* be at the root of your directory, right before your *tests* folder.
                                
                                All of your *tests* must begin with the `test` prefix and end with the `.art` extension to be found,
                                since you may want to mix them with some other files.
                                
                                Being that said, that is the right way of setting up your *runner*:
                                
                                Let's consider that you have the following directory:
                                
                                ```
                                src/
                                    ...
                                tests/
                                    ...
                                main.art
                                tester.art
                                ```
                                
                                Into your `tester.art`, you must:
                                
                                ```art
                                import {unitt}
                                
                                do ::
                                    runTests "tests"
                                ```
                                
                                To run it, call:
                                
                                ```
                                arturo tester.art
                                ```
                                
                                > [!TIP] 
                                > You may want to use a hashbang to don't need to call arturo for every run.
                                
                                ### The *tests* itself
                                
                                A real example of tests:
                                
                                ```art
                                unix?: true
                                
                                test "appending binaries with integer is working" [
                                    b: to :binary 0
                                    assert -> as.binary 2 = append b 1
                                    assert -> as.binary 1 = b ++ 1
                                ]
                                
                                test.prop "appending binaries with integer returns a binary" [
                                    b: to :binary 0
                                    assert -> binary? append b 1
                                    assert -> binary? b ++ 1
                                ]
                                
                                test.skip: unix? "split is working for windows's paths" [
                                    assert -> ["." "splited" "path"] = split.path ".\\splited\\path"
                                ]
                                ```
                                
                                This will show you:
                                
                                ```
                                ❌ - assert that appending binaries with integer is working
                                     assertion : [as binary 1 = append b 1]
                                
                                ✅ - assert that appending binaries with integer is working
                                     assertion : [as binary 1 = b ++ 1]
                                
                                ✅ ~ assert that appending binaries with integer returns a binary
                                     assertion : [binary? append b 1]
                                
                                ✅ - assert that appending binaries with integer returns a binary
                                     assertion : [binary? b ++ 1]
                                
                                ⏩ - assert that split is working for windows's paths      
                                      skipped!
                                ```
                                
                                > [!NOTE]
                                > Property-based tests have `~` as separator. 
                                
                                ### The *Runner*
                                
                                Basically, you can run your *tests units* without a *runner*. 
                                But there are some reasons why you should prefer to use a `runTests` function to run them.
                                
                                First, your *runner*'s output will give you important information about the current run.
                                This will show you the file being runned, 
                                the tests's status
                                and at the end a summary of failed, skipped and passed tests:
                                
                                ```
                                ===== Statistics =====
                                
                                ⏏️   TOTAL: 24 assertions
                                ✅  PASSED: 20 assertions
                                ⏩ SKIPPED: 4 assertions
                                ❌  FAILED: 4 assertions
                                
                                ===== ========== =====
                                ```
                                
                                Also, the runner is able to return an error code, 
                                so that is great if you're working with *Continuous Integration*.
                                
                                ## Documentation
                                
                                ### *Runner*
                                - `runTests: $[folder :string]`:
                                    The *runner function*, this function will look for *tests* inside the relative `folder`.
                                    Remember that all *tests* must begin with the `test` prefix, and be an `.art` extension.
                                    - `.failFast`:
                                        Fails on the first error found. 
                                        This works at file scope due to our current way of running tests.
                                    - `.pattern :string`:
                                        Defines what is a test-file via a kind-of *glob* pattern.
                                        Use a `*` as spliter. 
                                        - Obs.: That is a kind-of *glob* pattern, not a real one. 
                                          So just use one and only one `*` to split the pre and suffix.
                                    - `.suppress`: 
                                        Suppress `panic`, this means: 
                                        this won't terminate your tests, 
                                        won't return an error code
                                        and won't print a `panic` message. 
                                
                                ### *Tests*
                                - `test: $[description :string, testCase :block]`:
                                    The test case itself, you need to pass a clear description to it,
                                    And the logic that you're trying to assert.
                                    - `.prop`:
                                        Indicates that a test is property-based.
                                    - `.skip :logical`:
                                        Skips tests for some condition. 
                                        If none condition is given, this will just skip the test.
                                - `assert: $[condition :block]`:
                                    A function that is only available inside the `test` case,
                                    makes an assertion given the `condition`.
                                
                                ---
                                
                                > Background photo on ["At a Glance"](#at-a-glance) 
                                  by [Jack Anstey](https://unsplash.com/@jack_anstey?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash) on [Unsplash](https://unsplash.com/photos/aerial-photography-of-road-zS4lUqLEiNA?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
                        }
                        license: #[
                                name: "MIT"
                                url: "https://choosealicense.com/licenses/mit/"
                        ]
                ]
                url: "https://api.github.com/repos/RickBarretto/unitt/zipball/v0.1.4"
                info: #[
                        entry: "unitt.art"
                        depends: [

                        ]
                        requires: [
                                >
                                 0.9.83
                        ]
                        executable: false
                ]
        ]
         #[
                version: 0.1.3-pre
                date: to :date "2024-01-31T02:06:00+00:00"
                link: "https://github.com/RickBarretto/unitt/releases/tag/v0.1.3-pre"
                details: #[
                        size: 2801390
                        files: 16
                        readme: {
                                <h1 align="center">
                                    Unitt
                                </h1>
                                
                                <p align="center">
                                    <i>Unitt</i> is a basic unit-test tool for the 
                                    <a href="https://github.com/arturo-lang/arturo/">
                                        Arturo Programming language
                                    </a>
                                    <br><br>
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo.png#gh-light-mode-only"
                                    />
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo-lightgray.png#gh-dark-mode-only" 
                                    />
                                </p>
                                
                                ## At a Glance
                                
                                <p align="center">
                                <img 
                                    alt="Running Unitt from terminal"
                                    width="720"
                                    src="./docs/running unitt screenshot.png"
                                />
                                </p>
                                
                                ## Trying Unitt
                                
                                *Unitt* may be splited into two sections: *the tester* and *the tests*.
                                
                                *The tester* is the section responsible to find, run and return error codes to the final user.
                                While *the tests* are responsible to group the rules and logic of the tests.
                                
                                ### Initial setup
                                
                                It's recomended that your *runner* be at the root of your directory, right before your *tests* folder.
                                
                                All of your *tests* must begin with the `test` prefix and end with the `.art` extension to be found,
                                since you may want to mix them with some other files.
                                
                                Being that said, that is the right way of setting up your *tester*:
                                
                                Let's consider that you have the following directory:
                                
                                ```
                                src/
                                    ...
                                tests/
                                    ...
                                main.art
                                tester.art
                                ```
                                
                                Into your `tester.art`, you must:
                                
                                ```art
                                import {unitt}
                                
                                do ::
                                    runTests "tests"
                                ```
                                
                                To run it, call:
                                
                                ```
                                arturo tester.art
                                ```
                                
                                > [!TIP] 
                                > You may want to use a hashbang to don't need to call arturo for every run.
                                
                                ### The *tests* itself
                                
                                A real example of tests:
                                
                                ```art
                                unix?: true
                                
                                test "appending binaries with integer is working" [
                                    b: to :binary 0
                                    assert -> as.binary 2 = append b 1
                                    assert -> as.binary 1 = b ++ 1
                                ]
                                
                                test.prop "appending binaries with integer returns a binary" [
                                    b: to :binary 0
                                    assert -> binary? append b 1
                                    assert -> binary? b ++ 1
                                ]
                                
                                test.skip: unix? "split is working for windows's paths" [
                                    assert -> ["." "splited" "path"] = split.path ".\\splited\\path"
                                ]
                                ```
                                
                                This will show you:
                                
                                ```
                                ❌ - assert that appending binaries with integer is working
                                     assertion : [as binary 1 = append b 1]
                                
                                ✅ - assert that appending binaries with integer is working
                                     assertion : [as binary 1 = b ++ 1]
                                
                                ✅ ~ assert that appending binaries with integer returns a binary
                                     assertion : [binary? append b 1]
                                
                                ✅ - assert that appending binaries with integer returns a binary
                                     assertion : [binary? b ++ 1]
                                
                                ⏩ - assert that split is working for windows's paths      
                                      skipped!
                                ```
                                
                                > [!NOTE]
                                > Property-based tests have `~` as separator. 
                                
                                
                                ## Documentation
                                
                                ### *Runner*
                                - `runTests: $[folder :string]`:
                                    The *runner function*, this function will look for *tests* inside the relative `folder`.
                                    Remember that all *tests* must begin with the `test` prefix, and be an `.art` extension. 
                                
                                ### *Tests*
                                - `test: $[description :string, testCase :block]`:
                                    The test case itself, you need to pass a clear description to it,
                                    And the logic that you're trying to assert.
                                    - `.prop`:
                                        Indicates that a test is property-based.
                                    - `.skip :logical`:
                                        Skips tests for some condition. 
                                        If none condition is given, this will just skip the test.
                                - `assert: $[condition :block]`:
                                    A function that is only available inside the `test` case,
                                    makes an assertion given the `condition`.
                                
                                ---
                                
                                > Background photo on ["At a Glance"](#at-a-glance) 
                                  by [Jack Anstey](https://unsplash.com/@jack_anstey?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash) on [Unsplash](https://unsplash.com/photos/aerial-photography-of-road-zS4lUqLEiNA?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
                        }
                        license: #[
                                name: "MIT"
                                url: "https://choosealicense.com/licenses/mit/"
                        ]
                ]
                url: "https://api.github.com/repos/RickBarretto/unitt/zipball/v0.1.3-pre"
                info: #[
                        entry: "unitt.art"
                        depends: [

                        ]
                        requires: [
                                >
                                 0.9.83
                        ]
                        executable: false
                ]
        ]
         #[
                version: 0.1.2-pre
                date: to :date "2024-01-29T11:17:23+00:00"
                link: "https://github.com/RickBarretto/unitt/releases/tag/v0.1.2-pre"
                details: #[
                        size: 2798820
                        files: 16
                        readme: {
                                <h1 align="center">
                                    Unitt
                                </h1>
                                
                                <p align="center">
                                    <i>Unitt</i> is a basic unit-test tool for the 
                                    <a href="https://github.com/arturo-lang/arturo/">
                                        Arturo Programming language
                                    </a>
                                    <br><br>
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo.png#gh-light-mode-only"
                                    />
                                    <img 
                                        alt="Arturo logo" 
                                        width="20" 
                                        src="https://github.com/arturo-lang/arturo/raw/master/docs/images/logo-lightgray.png#gh-dark-mode-only" 
                                    />
                                </p>
                                
                                ## At a Glance
                                
                                <p align="center">
                                <img 
                                    alt="Running Unitt from terminal"
                                    width="720"
                                    src="./docs/running unitt screenshot.png"
                                />
                                </p>
                                
                                ## Trying Unitt
                                
                                *Unitt* may be splited into two sections: *the tester* and *the tests*.
                                
                                *The tester* is the section responsible to find, run and return error codes to the final user.
                                While *the tests* are responsible to group the rules and logic of the tests.
                                
                                ### Initial setup
                                
                                It's recomended that your *runner* be at the root of your directory, right before your *tests* folder.
                                
                                All of your *tests* must begin with the `test` prefix and end with the `.art` extension to be found,
                                since you may want to mix them with some other files.
                                
                                Being that said, that is the right way of setting up your *tester*:
                                
                                Let's consider that you have the following directory:
                                
                                ```
                                src/
                                    ...
                                tests/
                                    ...
                                main.art
                                tester.art
                                ```
                                
                                Into your `tester.art`, you must:
                                
                                ```art
                                import {unitt}
                                
                                do ::
                                    runTests "tests"
                                ```
                                
                                To run it, call:
                                
                                ```
                                arturo tester.art
                                ```
                                
                                > [!TIP] 
                                > You may want to use a hashbang to don't need to call arturo for every run.
                                
                                ### The *tests* itself
                                
                                A real example of tests:
                                
                                ```art
                                test "appending binaries with integer is working" [
                                    b: to :binary 0
                                    assert -> as.binary 2 = append b 1
                                    assert -> as.binary 1 = b ++ 1
                                ]
                                
                                test.prop "appending binaries with integer returns a binary" [
                                    b: to :binary 0
                                    assert -> binary? append b 1
                                    assert -> binary? b ++ 1
                                ]
                                ```
                                
                                This will show you:
                                
                                ```
                                ❌ - assert that appending binaries with integer is working
                                     assertion : [as binary 1 = append b 1]
                                
                                ✅ - assert that appending binaries with integer is working
                                     assertion : [as binary 1 = b ++ 1]
                                
                                ✅ ~ assert that appending binaries with integer returns a binary
                                     assertion : [binary? append b 1]
                                
                                ✅ - assert that appending binaries with integer returns a binary
                                     assertion : [binary? b ++ 1]
                                ```
                                
                                > [!NOTE]
                                > Property-based tests have `~` as separator. 
                                
                                
                                ## Documentation
                                
                                ### *Runner*
                                - `runTests: $[folder :string]`:
                                    The *runner function*, this function will look for *tests* inside the relative `folder`.
                                    Remember that all *tests* must begin with the `test` prefix, and be an `.art` extension. 
                                
                                ### *Tests*
                                - `test: $[description :string, testCase :block]`:
                                    The test case itself, you need to pass a clear description to it,
                                    And the logic that you're trying to assert.
                                    - `.prop`:
                                        Indicates that a test is property-based.
                                - `assert: $[condition :block]`:
                                    A function that is only available inside the `test` case,
                                    makes an assertion given the `condition`.
                                
                                ---
                                
                                > Background photo on ["At a Glance"](#at-a-glance) 
                                  by [Jack Anstey](https://unsplash.com/@jack_anstey?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash) on [Unsplash](https://unsplash.com/photos/aerial-photography-of-road-zS4lUqLEiNA?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
                        }
                        license: #[
                                name: "MIT"
                                url: "https://choosealicense.com/licenses/mit/"
                        ]
                ]
                url: "https://api.github.com/repos/RickBarretto/unitt/zipball/v0.1.2-pre"
                info: #[
                        entry: "unitt.art"
                        depends: [

                        ]
                        requires: [
                                >
                                 0.9.83
                        ]
                        executable: false
                ]
        ]
]
