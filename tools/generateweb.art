#!/usr/bin/env arturo

do ./"versioncontrol.art"

packages: # "packages/list.art"
entries: new []

siteroot: (key? env 'GITHUB_ACTION)? -> "https://pkgr.art"
                                     -> "file:///Users/drkameleon/Documents/Code/OpenSource/arturo-lang/pkgr.art/public"

deploying?: key? env 'GITHUB_ACTION

isHome: false

generateThumbnail: function [title, author, description][
    xx: function [cc][execute.directly cc]

    xx {convert -size 1200x600 canvas:#f5f5f7 thumb_bg.png}
    xx {convert -size 1100x10 canvas:'#82138d' thumb_sep.png}

    xx ~{convert -background transparent -fill '#82138d' -font 'website/resources/Inter-Bold.ttf' -pointsize 100 label:'|title|' thumb_title.png}
    xx {convert thumb_bg.png thumb_title.png -gravity northwest -geometry +90+90 -composite thumb_pre.png}

    xx ~{convert -size 600x200 -background transparent -fill '#575759' -font 'website/resources/Inter-Regular.ttf' -pointsize 38 caption:"|description|" thumb_desc.png}

    xx {convert -size 100x10 canvas:#e0e0e0 thumb_line_1.png}
    xx {convert -size 100x10 canvas:#D7CDD8 thumb_line_2.png}
    xx {convert -size 100x10 canvas:#CFBBD1 thumb_line_3.png}
    xx {convert -size 100x10 canvas:#C6A8C9 thumb_line_4.png}
    xx {convert -size 100x10 canvas:#BE95C2 thumb_line_5.png}
    xx {convert -size 100x10 canvas:#B583BA thumb_line_6.png}
    xx {convert -size 100x10 canvas:#AD70B3 thumb_line_7.png}
    xx {convert -size 100x10 canvas:#A45EAB thumb_line_8.png}
    xx {convert -size 100x10 canvas:#9C4BA4 thumb_line_9.png}
    xx {convert -size 100x10 canvas:#93389C thumb_line_10.png}
    xx {convert -size 100x10 canvas:#8B2695 thumb_line_11.png}
    xx {convert -size 100x10 canvas:#82138d thumb_line_12.png}

    xx {convert thumb_line_1.png thumb_line_2.png thumb_line_3.png thumb_line_4.png thumb_line_5.png thumb_line_6.png thumb_line_7.png thumb_line_8.png thumb_line_9.png thumb_line_10.png thumb_line_11.png thumb_line_12.png +append thumb_sep.png}

    xx {convert -size 1200x90 canvas:#f0f0f3 thumb_line.png}
    xx ~{convert -background transparent -fill '#979799' -font 'website/resources/Inter-Bold.ttf' -pointsize 30 label:"|title|.pkgr.art" thumb_line_text.png}
    xx ~{convert -background transparent -fill '#979799' -font 'website/resources/Inter-Bold.ttf' -pointsize 30 label:"|author|" thumb_line_author.png}
    xx {convert thumb_line.png thumb_line_text.png -gravity east -geometry +90+0 -composite thumb_l.png}
    xx {convert thumb_l.png thumb_line_author.png -gravity west -geometry +140+0 -composite thumb_l2.png}
    xx {convert thumb_l2.png website/resources/user_icon.png -gravity west -geometry +90+0 -composite thumb_l3.png}

    xx {convert thumb_pre.png website/resources/trans_logo.png -gravity east -geometry +90-40 -composite thumb_final.png}
    xx {convert thumb_final.png thumb_l3.png -gravity south -composite thumb_final2.png}
    xx {convert thumb_final2.png thumb_desc.png -gravity west -geometry +90+50 -composite thumb_final3.png}
    xx {convert thumb_final3.png thumb_sep.png -gravity south -geometry +0+91 -composite thumb_final4.png}

    move "thumb_final4.png" ~"public/thumbs/|title|.png"
    xx {rm thumb_*}
]

compressHTML: function [file][
    execute ~{!sh 
        html-minifier --collapse-whitespace --remove-comments --remove-optional-tags --remove-redundant-attributes --remove-script-type-attributes --use-short-doctype --minify-css true |file| -o |file|
    }
]

compressCSS: function [file][
    execute ~{!sh 
        cleancss |file| -o |file|
    }
]

getProperMarkdown: function [md][
    md >> "tmp.md" 
    ret: execute ~{ruby |relative "gfm.rb"| tmp.md}
    ; print ["Got:\n" ret]
    ; ret: read.markdown md
    delete "tmp.md"
    ret: replace ret {/class="language-[^"]+"/} ""
    ret: replace ret {<pre lang="red"><code>} {<pre class="language-arturo"><code class="language-arturo">}
    ret: replace ret {<pre lang="arturo"><code>} {<pre class="language-arturo"><code class="language-arturo">}
    ret: replace ret {<pre lang="art"><code>} {<pre class="language-arturo"><code class="language-arturo">}
    ret: replace ret "/>" ">"
    ret: replace ret { align="center"} { style="text-align:center"}
    ret: replace ret {/<img width="[^"]+"/} {<img}
    ret: replace ret {<a href="http} {<a rel="nofollow" target="_blank" href="http}
    return ret
]

getLink: function [loc, subv][
    rett: ""
    (deploying?)?[
        rett: "https://" ++ loc ++ ".pkgr.art"
        unless null? subv ->
            rett: rett ++ "/" ++ to :string subv
    ][
        rett: siteroot ++ "/_packages/" ++ loc
        unless null? subv ->
            rett: rett ++ "/" ++ to :string subv
        rett: rett ++ "/index.html"
    ]
    return rett
]

getPackageBox: function [entry][
    render.template read "website/components/package-box.html"
]

getCleanTags: function [taglist][
    if null? taglist -> return []
    taglist | filter 'tag [contains? ["arturo", "arturo-lang", "arturo-language", "arturo-package", "pkgr-art", "package"] tag]
            | map 'tag [replace tag "-" " "]
]

octicon: function [icon][
    read ~"website/icons/|icon|.svg"
]

postprocessAlerts: function [src][
    replace src [
        {/<blockquote>\n<p>\[!TIP\]/}
        {/<blockquote>\n<p>\[!NOTE\]/}
        {/<blockquote>\n<p>\[!IMPORTANT\]/}
        {/<blockquote>\n<p>\[!WARNING\]/}
        {/<blockquote>\n<p>\[!CAUTION\]/}
     ]@[
        ~"<blockquote class='alert alert-tip'>\n<p><b class='alert-message'>|octicon 'lightbulb|Tip</b><br>\n"
        ~"<blockquote class='alert alert-note'>\n<p><b class='alert-message'>|octicon 'info|Note</b><br>\n"
        ~"<blockquote class='alert alert-important'>\n<p><b class='alert-message'>|octicon 'report|Important</b><br>\n"
        ~"<blockquote class='alert alert-warning'>\n<p><b class='alert-message'>|octicon 'alert|Warning</b><br>\n"
        ~"<blockquote class='alert alert-caution'>\n<p><b class='alert-message'>|octicon 'stop|Caution</b><br>\n"
     ]
]

postprocessImages: function [src,repoName][
    replace src [
        {#gh-dark-mode-only"}
        {src="./}
    ]@[
        {#gh-dark-mode-only" style="display:none"}
        ~{src="https://raw.githubusercontent.com/|repoName|/master/}
    ]
]

postprocessHTML: function [htm, repoName][
    postprocessImages postprocessAlerts htm repoName
]

createSpecFile: function [package, versionToProcess, targetFolder][
    ret: #[
        name: package\name,
        description: package\info\description
        license: versionToProcess\details\license\name;package\info\license\name
        author: package\info\author\name
        version: versionToProcess\version
        url: versionToProcess\url
        entry: versionToProcess\info\entry
        executable: versionToProcess\info\executable
        depends: versionToProcess\info\depends
        requires: versionToProcess\info\requires
    ]

    write replace strip as.pretty.unwrapped.code ret {/\[\n\n\s+\]/} "[]" ~"|targetFolder|/spec" 
]

searchable: new []

; create thumbs folder if necessary

thumbsFolder: "public/thumbs"
unless directory? thumbsFolder [
    write.directory  ø "public/thumbs"
]

loop packages [k,v][
    print ~"- Processing main package: |k|"
    inf: # ~"packages/info/|k|.art"
    generateThumbnail k inf\author\name inf\description
    vers: do "@" ++ read ~"packages/version/|k|.art" 
    ;--------------------------------
    ; DEBUGGING!
    ;--------------------------------
    ; inf\tags: ["database", "i18n", "sqlite", "mysql"]
    ; vers\0\info\depends: ["boom", "zoom", "foom"]
    ; vers\0\info\requires: [> 0.9.83]
    'entries ++ #[
        name: k
        info: inf
        version: vers
    ]

    'searchable ++ #[
        value: k,
        description: inf\description,
        tags: inf\tags,
        version: vers\0\version
    ]
]

processPackagePage: function [entry][
    packageTitle: entry\name ++ " &bull; "
    postprocessHTML render.template read "website/package.html" entry\info\fullName
]

searchable: write.compact.json searchable ø 

pkgFolder: "public/_packages"
unless directory? pkgFolder [
    write.directory ø pkgFolder 
]

loop entries 'entry [
    print ~"- Creating subpages: |entry\name|"
    tgtName: ~{|pkgFolder|/|entry\name|}
    unless directory? tgtName [
        write.directory ø tgtName 
    ]

    currentVersion: first entry\version
    currentVersionIsLatest: true
    write processPackagePage entry ~{|tgtName|/index.html} 
    compressHTML ~{|tgtName|/index.html}

    createSpecFile entry currentVersion tgtName

    loop entry\version 'vv [
        versionTgt: ~{|tgtName|/|vv\version|}
        print ~"\t|vv\version|"
        unless directory? versionTgt [
            write.directory ø versionTgt 
        ]

        currentVersion: vv
        currentVersionIsLatest: false
        if currentVersion = first entry\version ->
            currentVersionIsLatest: true

        write processPackagePage entry ~{|versionTgt|/index.html} 
        compressHTML ~{|versionTgt|/index.html}

        createSpecFile entry vv versionTgt
    ]
]

entries: arrange.descending entries 'entry [
    entry\version\0\date
]

if odd? size entries ->
    'entries ++ null

; render homepage
isHome: true
isSearch: false
packageTitle: ""
write render.template read "website/index.html" "public/index.html"
      

; and compress it
compressHTML "public/index.html"

; render search page
isHome: false
isSearch: true
write.directory  ø "public/search"
if null? last entries ->
    pop 'entries
write render.template read "website/search.html"
      "public/search/index.html"
      

; and compress it too
compressHTML "public/search/index.html"

; create assets folder if necessary
assetsFolder: "public/assets"
unless directory? assetsFolder [
    write.directory ø assetsFolder 
]

; compile scss
execute ~"sass website/style.scss |assetsFolder|/style.css"

; and compress it too
compressCSS ~"|assetsFolder|/style.css"

; copy resources
loop list "website/images" 'file [
    if contains? [".jpg", ".png"] extract.extension file [
        copy file assetsFolder ++ "/" ++ extract.basename file
    ]
]

; copy favicon-related resources
loop list "website" 'file [
    if contains? [".png", ".ico", ".svg", ".webmanifest", ".xml"] extract.extension file [
        copy file "public/" ++ extract.basename file
    ]
]

; copy main javascript
copy "website/script.js" ~"|assetsFolder|/script.js"

; copy server scripts
copy "website/download.php" "public/download.php"
copy "website/getdownloads.php" "public/getdownloads.php"

print color #green "Done!"
