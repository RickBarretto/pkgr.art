#!/usr/bin/env arturo

AccessToken: read "github.pat"
IsCI?: key? env 'GITHUB_ACTION      ; if it's set, we're inside a GitHub workflow

;--------------------------------------------------
; Helper methods
;--------------------------------------------------

getLicenseUrl: function [lc][
    if lc = "MIT" -> return "https://choosealicense.com/licenses/mit/"
    if lc = "Beerware" -> return "https://fedoraproject.org/wiki/Licensing/Beerware"
    return "--"
]

getGH: function [reqtype, req][
    if reqtype = :githubLink [
        accepting: "application/vnd.github+json"
        apiVersion: "2022-11-28"

        (IsCI?)?[
            got: execute ~{!sh
                gh api -H "Accept: |accepting|" -H "X-GitHub-Api-Version: |apiVersion|" /|req|
            }
            return read.json got
        ][
            got: request.get.headers: #[
                "Accept": accepting
                "Authorization": ~"Bearer |AccessToken|"
                "X-GitHub-Api-Version": apiVersion
            ] ~{https://api.github.com/|req|} ø
            ;inspect got
            return read.json got\body
        ]
    ]

    if reqtype = :codebergLink [
        accepting: "application/json"

        got: request.get.headers: #[
            "Accept": accepting
        ] ~{https://codeberg.org/api/v1/|req|} ø
        return read.json got\body
    ]
]

extractCorrectVersion: function [versionString][
    if throws? -> to :version versionString [
        if throws? -> to :version strip replace versionString "v" ""
            -> null
    ]
]

howAreStarsCalled: function [reqtype][
    if reqtype = :githubLink -> return "stargazers_count"
    if reqtype = :codebergLink -> return "stars_count"
]

;--------------------------------------------------
; Main routines
;--------------------------------------------------

; getReadme: function [pkg][
;     return ""
;     [owner, repo]: split.by:"/" pkg\location
;     unless is? :githubLink pkg -> return ""
;     got: getGH ~"repos/|owner|/|repo|/readme"
;     if key? got 'download_url [
;         return read got\download_url
;     ]
;     return ø
; ]

getRepoInfo: function [pkg][
    [owner, repo]: split.by:"/" pkg\location
    if throws? [
        got: getGH type pkg ~"repos/|owner|/|repo|"
        ; licenseName: "--"
        ; licenseUrl: "--"
        ; if is? :githubLink pkg [
        ;     if got\license [
        ;         licenseInfo: read.json got\license\url
        ;         licenseName: got\license\spdx_id
        ;         licenseUrl: licenseInfo\html_url
        ;     ]
        ; ]
        #[
            name: got\name
            fullName: got\full_name
            url: got\html_url
            description: got\description
            tags: got\topics

            ;readme: getReadme pkg
            stats: #[
                stars: got\[howAreStarsCalled type pkg]
                watch: got\watchers_count
            ]
            author: #[
                name: got\owner\login
                url: got\owner\html_url
                avatar: got\owner\avatar_url
            ]
        ]
    ] -> null
]

getReleaseInfo: function [owner, repo, version, url][
    if IsCI? [
        write.directory ø "tmp" 
    ]

    tgt: ~{tmp/|owner|-|repo|-|version|.zip}
    download.as: tgt url
    unzip "tmp" tgt
    delete tgt

    tgtFolder: first filter list "tmp" => [contains? & ".DS_Store"]
    infoFile: ~"|tgtFolder|/info.art"

    ret: #[]

    if exists? infoFile ->
        ret: # infoFile

    unless key? ret 'entry ->
        ret\entry: "main.art"

    unless ".art" = extract.extension ret\entry ->
        ret\entry: ret\entry ++ ".art"

    unless key? ret 'executable ->
        ret\executable: false
    
    if ret\executable [
        unless ".art" = extract.extension ret\executable ->
            ret\executable: ret\executable ++ ".art"
    ]

    unless key? ret 'depends ->
        ret\depends: []

    unless key? ret 'requires ->
        ret\requires: [> 0.0.0]

    unless exists? ~{|tgtFolder|/|ret\entry|} ->
        ret: null

    delete.directory tgtFolder

    return ret
]

getFolderSize: function [folder][
    subfiles: list folder
    if 0 = size subfiles -> return 0`B
    return fold.seed: 0`B subfiles [bef,filepath][
        (directory? filepath) ? -> bef + getFolderSize filepath
                                -> bef + volume filepath
    ]
]

getNoOfFiles: function [folder][
    subfiles: list folder
    if 0 = size subfiles -> return 0
    return fold.seed: 0 subfiles [bef,filepath][
        (directory? filepath) ? -> bef + getNoOfFiles filepath
                                -> bef + 1
    ]
]

getReadmeFile: function [folder][
    tgtF: first list folder
    if exists? r1: <= join.path @[tgtF "README"] [return read r1]
    if exists? r2: <= join.path @[tgtF "README.md"] [return read r2]
    if exists? r3: <= join.path @[tgtF "readme.md"] [return read r3]
    return "--"
]

getRepoDetails: function [pkg, downloadUrl][
    [owner, repo]: split.by:"/" pkg\location

    tmpName: ~{|owner|-|repo|}
    tmpZip: ~"|tmpName|.zip"
    tmpFolder: ~"|tmpName|"
    
    download.as: tmpZip downloadUrl
    unzip tmpFolder tmpZip

    repoSize: to :integer scalar getFolderSize tmpFolder
    repoFiles: getNoOfFiles tmpFolder
    repoReadme: getReadmeFile tmpFolder

    licenseName: "--"
    ; (is? :githubLink pkg) ? [

    ; ][
    licensing: first read.json execute (~./{license-detector-|sys\os|}) ++ ~" --format json |first list tmpFolder|"
    unless key? licensing 'error [
        firstMatch: first licensing\matches
        licenseName: firstMatch\license
    ]

    licenseUrl: getLicenseUrl licenseName

    ; ]
    repoLicense: #[
        name: licenseName
        url: licenseUrl
    ]

    delete.directory tmpFolder
    delete tmpZip

    ret: #[size: repoSize, files: repoFiles, readme: repoReadme, license: repoLicense]

    return ret
]

getVersions: function [pkg][
    [owner, repo]: split.by:"/" pkg\location
    
    greaterThan: (attr 'greaterThan) ?? 0.0.0
    available: new []
    try [
        releases: getGH type pkg ~"repos/|owner|/|repo|/releases"
        loop releases 'release [
            if ver: <= extractCorrectVersion release\tag_name [
                if ver > greaterThan [
                    if releaseInfo: <= getReleaseInfo owner repo ver release\zipball_url [
                        'available ++ #[
                            version: ver
                            date: to :date release\published_at
                            link: release\html_url 
                            details: getRepoDetails pkg release\zipball_url
                            url: release\zipball_url
                            info: releaseInfo
                        ]
                    ]
                ]
            ]
        ]
    ]
    return available
]

;--------------------------------------------------
; Running directly from console
;--------------------------------------------------

if standalone? ::
    owner: arg\0
    repo: arg\1
    inspect getRepoInfo owner repo
    print as.pretty.code getVersions owner repo